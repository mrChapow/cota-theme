<!DOCTYPE html>
<html lang="en" style="background:#000!important;background-color:#000!important">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Helm - 3D Interactive Product</title>
  <meta name="theme-color" content="#000000" />
  <meta name="msapplication-navbutton-color" content="#000000" />
  <meta name="apple-mobile-web-app-status-bar-style" content="black" />

  {%- comment -%}
    Keep Shopifyâ€™s header for forms/analytics to work.
    Visuals are fully controlled by your own CSS below.
  {%- endcomment -%}
  {{ content_for_header }}

  <style>
    html{background:#000!important;background-color:#000!important;color-scheme:dark}
    body{background:#000!important;background-color:#000!important;margin:0;padding:0;min-height:100vh}
    *{box-sizing:border-box}
    html::before{content:'';position:fixed;top:0;left:0;width:100vw;height:100vh;background:#000!important;z-index:-1}
  </style>

  <style>
    :root {
      --desktop-price-top: 25vh;
      --desktop-desc-top: 45vh;
      --desktop-panels-right: 25vw;
      --desktop-panel-width: 350px;
      --mobile-price-bottom: 22vh;
      --mobile-desc-bottom: 6vh;
      --mobile-panel-width: 90vw;
      --mobile-panel-max-width: 400px;
    }
    * { margin:0; padding:0; box-sizing:border-box; }
    body {
      font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
      background:#000; min-height:100vh; overflow:hidden;
    }
    #root { width:100vw; height:100vh; position:relative; }
    .canvas-container { width:100%; height:100%; position:relative; background:#000; }
    .glass-panel {
      background: linear-gradient(135deg, rgba(255,255,255,.18) 0%, rgba(255,255,255,.12) 50%, rgba(255,255,255,.15) 100%);
      backdrop-filter: blur(40px) saturate(180%);
      border:1px solid rgba(255,255,255,.35);
      border-top:2px solid rgba(255,255,255,.5);
      border-radius:24px; padding:20px;
      box-shadow:0 20px 40px rgba(0,0,0,.3), 0 8px 16px rgba(0,0,0,.2), inset 0 1px 0 rgba(255,255,255,.4);
      position:fixed; z-index:10; width:var(--desktop-panel-width);
      transition:all .3s cubic-bezier(.4,0,.2,1);
    }
    @media (hover:hover){ .glass-panel:hover{ transform:translateY(-2px);
      box-shadow:0 25px 50px rgba(0,0,0,.4), 0 12px 20px rgba(0,0,0,.25), inset 0 1px 0 rgba(255,255,255,.5); } }
    .price-panel{ top:var(--desktop-price-top); right:var(--desktop-panels-right); }
    .description-panel{ top:var(--desktop-desc-top); right:var(--desktop-panels-right); }
    .glass-panel h1{ font-size:2.5rem; font-weight:700; color:#fff; margin:0 0 8px; text-shadow:0 2px 4px rgba(0,0,0,.3); }
    .glass-panel h2{ font-size:1.5rem; font-weight:600; color:#fff; margin:0 0 12px; text-shadow:0 2px 4px rgba(0,0,0,.3); }
    .glass-panel p{ color:rgba(255,255,255,.9); font-size:1rem; line-height:1.5; margin:0 0 20px; }
    .glass-panel .text-sm{ font-size:.9rem; line-height:1.4; }
    .buy-button{
      background:linear-gradient(135deg,#22C55E 0%,#16A34A 100%); color:#fff; border:none; border-radius:16px;
      padding:14px 28px; font-size:1.1rem; font-weight:600; cursor:pointer;
      transition:all .3s cubic-bezier(.4,0,.2,1);
      box-shadow:0 8px 16px rgba(34,197,94,.3), 0 4px 8px rgba(34,197,94,.2); width:100%;
    }
    @media (hover:hover){ .buy-button:hover{ transform:translateY(-2px);
      box-shadow:0 12px 24px rgba(34,197,94,.4), 0 6px 12px rgba(34,197,94,.3);
      background:linear-gradient(135deg,#16A34A 0%,#15803D 100%);} }
    .buy-button:active{ transform:translateY(0); box-shadow:0 4px 8px rgba(34,197,94,.3), 0 2px 4px rgba(34,197,94,.2); }

    .modal-overlay{
      position:fixed; inset:0; background:rgba(0,0,0,.8); backdrop-filter:blur(8px);
      z-index:100; display:none; align-items:center; justify-content:center;
    }
    .modal-overlay.show{ display:flex; }
    .modal-content{
      background: linear-gradient(135deg, rgba(255,255,255,.18) 0%, rgba(255,255,255,.12) 50%, rgba(255,255,255,.15) 100%);
      backdrop-filter: blur(40px) saturate(180%);
      border:1px solid rgba(34,197,94,.3); border-radius:24px; padding:32px;
      max-width:500px; width:90vw; color:#fff; position:relative;
    }
    .modal-title{ font-size:1.5rem; font-weight:700; text-align:center; margin-bottom:24px; }
    .modal-text{ color:rgba(255,255,255,.9); margin-bottom:24px; text-align:center; }
    .form-group{ margin-bottom:16px; }
    .form-label{ display:block; margin-bottom:8px; font-weight:500; }
    .form-input{
      width:100%; padding:12px 16px; background:rgba(255,255,255,.08);
      border:1px solid rgba(255,255,255,.15); border-radius:12px; color:#fff; font-size:1rem;
    }
    .form-input:focus{ outline:none; border-color:#22C55E; background:rgba(255,255,255,.12); }
    .form-input::placeholder{ color:rgba(255,255,255,.6); }
    .submit-button{
      width:100%; background:linear-gradient(135deg,#22C55E 0%,#16A34A 100%); color:#fff; border:none; border-radius:12px;
      padding:14px; font-size:1rem; font-weight:600; cursor:pointer; transition:all .3s; margin-bottom:16px;
    }
    .submit-button:hover{ transform:translateY(-1px); background:linear-gradient(135deg,#16A34A 0%,#15803D 100%); }
    .early-support-link{ display:block; text-align:center; color:rgba(255,255,255,.7); text-decoration:underline; font-size:.8rem; cursor:pointer; transition:color .3s; }
    .early-support-link:hover{ color:#fff; }
    .close-button{
      position:absolute; top:16px; right:16px; background:none; border:none; color:rgba(255,255,255,.7);
      font-size:1.5rem; cursor:pointer; transition:color .3s;
    }
    .close-button:hover{ color:#fff; }

    @media (max-width:768px){
      .glass-panel{
        position:fixed; width:var(--mobile-panel-width); max-width:var(--mobile-panel-max-width);
        left:50%; transform:translateX(-50%); padding:18px; touch-action:none; -webkit-touch-callout:none; -webkit-user-select:none; user-select:none;
      }
      .glass-panel:active{ transform:translateX(-50%) !important; }
      .price-panel{ bottom:var(--mobile-price-bottom); top:auto; right:auto; }
      .description-panel{ bottom:var(--mobile-desc-bottom); top:auto; right:auto; }
      #three-canvas{ position:fixed!important; top:0!important; left:0!important; width:100vw!important; height:100vh!important; z-index:1!important; }
      .glass-panel h1{ font-size:2rem; } .glass-panel h2{ font-size:1.3rem; } .glass-panel p{ font-size:.95rem; }
      .buy-button{ padding:12px 24px; font-size:1rem; }
      .modal-content{ padding:24px; }
    }

    ::-webkit-scrollbar{ display:none; }
    html{ -ms-overflow-style:none; scrollbar-width:none; }
    #three-canvas{ display:block; width:100%; height:100%; }
  </style>

  <!-- Three.js CDN -->
  <script src="https://unpkg.com/three@0.160.0/build/three.min.js"></script>
</head>
<body>
  <div id="root">
    <div class="canvas-container">
      <canvas id="three-canvas"></canvas>

      <!-- Price Panel -->
      <div class="glass-panel price-panel">
        <div style="text-align:center;">
          <h1>$299.99</h1>
          <!-- Keep exact behavior: open modal on click -->
          <button class="buy-button" onclick="handlePurchase()">Buy</button>
        </div>
      </div>

      <!-- Description Panel -->
      <div class="glass-panel description-panel">
        <div>
          <h2>Helm</h2>
          <div style="margin-top:8px;">
            <p class="text-sm" style="opacity:.9;">Cota Pilot Project</p>
          </div>
        </div>
      </div>
    </div>

    <!-- Email Collection Modal (Shopify customer form; no Stripe) -->
    <div class="modal-overlay" id="email-modal">
      <div class="modal-content">
        <button class="close-button" onclick="closeModal()">&times;</button>
        <h2 class="modal-title">Thank you for your interest!</h2>
        <p class="modal-text">Unfortunately, this item isn't available yet. We'd love to keep in contact.</p>

        {% form 'customer', id: 'email-form' %}
          <input type="hidden" name="contact[tags]" value="newsletter,helm,notify">
          <div class="form-group">
            <label class="form-label">ðŸ“§ Email:</label>
            <input type="email" class="form-input" name="contact[email]" placeholder="your@email.com" required>
          </div>
          <div class="form-group">
            <label class="form-label">ðŸ“· Instagram:</label>
            <input type="text" class="form-input" name="contact[body]" placeholder="@yourusername">
          </div>
          <button type="submit" class="submit-button">Submit</button>
          {% if form.posted_successfully? %}
            <p class="modal-text" style="margin-top:8px;">Thanks â€” youâ€™re on the list.</p>
          {% elsif form.errors %}
            <p class="modal-text">{{ form.errors | default_errors }}</p>
          {% endif %}
        {% endform %}

      </div>
    </div>
  </div>

  <script>
    // 3D Scene Variables
    let scene, camera, renderer, cube;
    let raycaster, mouse;
    let isRotating=false, isMoving=false, isDragging=false;
    let lastPointer={x:0,y:0}, tapCount=0, tapTimer=null;
    let cubePosition = window.innerWidth <= 768 ? { x: 0, y: 0.8, z: 0 } : { x: -1.2, y: 0, z: 0 };
    let time=0;

    function init(){
      scene = new THREE.Scene();
      camera = new THREE.PerspectiveCamera(50, window.innerWidth/window.innerHeight, 0.1, 1000);

      const canvas=document.getElementById('three-canvas');
      renderer=new THREE.WebGLRenderer({canvas,antialias:true,alpha:true});
      renderer.setSize(window.innerWidth,window.innerHeight);
      renderer.setClearColor(0x000000,0);
      renderer.shadowMap.enabled=true;
      renderer.shadowMap.type=THREE.PCFSoftShadowMap;

      scene.add(new THREE.AmbientLight(0xffffff,0.4));
      const dir=new THREE.DirectionalLight(0xffffff,1.0);
      dir.position.set(10,10,5); dir.castShadow=true; dir.shadow.mapSize.width=2048; dir.shadow.mapSize.height=2048; scene.add(dir);
      const pl=new THREE.PointLight(0xffffff,0.3); pl.position.set(-10,-10,-10); scene.add(pl);

      raycaster=new THREE.Raycaster(); mouse=new THREE.Vector2();
      createCube();
      camera.position.set(0,0,5);
      addEventListeners();
      animate();
    }

    function createCube(){
      const g=new THREE.BoxGeometry(window.innerWidth<=768?1.0:1.5, window.innerWidth<=768?1.0:1.5, window.innerWidth<=768?1.0:1.5);
      const m=new THREE.MeshStandardMaterial({ color:0x22C55E, metalness:0.9, roughness:0.1, emissive:0x16A34A, emissiveIntensity:0.1 });
      cube=new THREE.Mesh(g,m); cube.position.set(cubePosition.x,cubePosition.y,cubePosition.z); cube.castShadow=true; cube.receiveShadow=true; scene.add(cube);
      addCubeLabels();
    }

    function addCubeLabels(){
      const isMobile=window.innerWidth<=768; const d=isMobile?0.51:0.76;
      const labels=[
        {text:'HELM',pos:[0,0,d],rot:[0,0,0]},
        {text:'PREMIUM',pos:[d,0,0],rot:[0,Math.PI/2,0]},
        {text:'COTA',pos:[0,d,0],rot:[-Math.PI/2,0,0]},
        {text:'DESIGN',pos:[-d,0,0],rot:[0,-Math.PI/2,0]},
        {text:'PILOT',pos:[0,0,-d],rot:[0,Math.PI,0]},
        {text:'PROJECT',pos:[0,-d,0],rot:[Math.PI/2,0,0]}
      ];
      labels.forEach(l=>{
        const c=document.createElement('canvas'); const ctx=c.getContext('2d'); c.width=256; c.height=64;
        ctx.fillStyle='rgba(255,255,255,0.9)'; ctx.fillRect(0,0,c.width,c.height);
        ctx.fillStyle='black'; ctx.font='bold 24px Arial'; ctx.textAlign='center'; ctx.textBaseline='middle'; ctx.fillText(l.text,c.width/2,c.height/2);
        const tex=new THREE.CanvasTexture(c);
        const mat=new THREE.MeshBasicMaterial({map:tex,transparent:true});
        const pg=new THREE.PlaneGeometry(isMobile?0.6:0.9, isMobile?0.15:0.225);
        const mesh=new THREE.Mesh(pg,mat);
        mesh.position.set(...l.pos); mesh.rotation.set(...l.rot);
        cube.add(mesh);
      });
    }

    function addEventListeners(){
      const canvas=renderer.domElement;
      canvas.addEventListener('mousedown',onPointerDown);
      window.addEventListener('mousemove',onPointerMove);
      window.addEventListener('mouseup',onPointerUp);
      canvas.addEventListener('touchstart',onPointerDown,{passive:false});
      window.addEventListener('touchmove',onPointerMove,{passive:false});
      window.addEventListener('touchend',onPointerUp,{passive:false});
      canvas.addEventListener('contextmenu',e=>e.preventDefault());
      window.addEventListener('resize',onWindowResize);
    }

    function onPointerDown(e){
      e.preventDefault();
      const r=renderer.domElement.getBoundingClientRect();
      const x=e.clientX||(e.touches&&e.touches[0].clientX);
      const y=e.clientY||(e.touches&&e.touches[0].clientY);
      lastPointer.x=x; lastPointer.y=y;
      mouse.x=((x-r.left)/r.width)*2-1; mouse.y=-((y-r.top)/r.height)*2+1;
      raycaster.setFromCamera(mouse,camera);
      const hit=raycaster.intersectObject(cube);
      if(hit.length>0){
        tapCount++; if(tapTimer) clearTimeout(tapTimer);
        if(tapCount===1){ tapTimer=setTimeout(()=>{ isRotating=true; isDragging=true; tapCount=0; },200); }
        else if(tapCount===2){ clearTimeout(tapTimer); isMoving=true; isDragging=true; tapCount=0; }
      }
    }

    function onPointerMove(e){
      if(!isDragging) return; e.preventDefault();
      const x=e.clientX||(e.touches&&e.touches[0].clientX);
      const y=e.clientY||(e.touches&&e.touches[0].clientY);
      const dx=(x-lastPointer.x)*0.01; const dy=(y-lastPointer.y)*0.01;
      if(isRotating){ cube.rotation.y+=dx; cube.rotation.x+=dy; }
      else if(isMoving){ cube.position.x+=dx; cube.position.y-=dy; }
      lastPointer.x=x; lastPointer.y=y;
    }

    function onPointerUp(){ isRotating=false; isMoving=false; isDragging=false; }

    function onWindowResize(){
      camera.aspect=window.innerWidth/window.innerHeight; camera.updateProjectionMatrix();
      renderer.setSize(window.innerWidth,window.innerHeight);
      if(cube){
        const isMobile=window.innerWidth<=768; const s=isMobile?1.0:1.5;
        cube.geometry.dispose(); cube.geometry=new THREE.BoxGeometry(s,s,s);
        cubePosition=isMobile?{x:0,y:0.8,z:0}:{x:-1.2,y:0,z:0}; cube.position.set(cubePosition.x,cubePosition.y,cubePosition.z);
        cube.children.forEach(ch=>cube.remove(ch)); addCubeLabels();
      }
    }

    function animate(){
      requestAnimationFrame(animate); time+=0.01;
      if(!isDragging){ cube.rotation.y+=0.005; cube.position.y=cubePosition.y+Math.sin(time*0.8)*0.05; }
      renderer.render(scene,camera);
    }

    // Modal controls
    function handlePurchase(){ document.getElementById('email-modal').classList.add('show'); }
    function closeModal(){ document.getElementById('email-modal').classList.remove('show'); }
    document.addEventListener('click', e => { const o=document.getElementById('email-modal'); if(e.target===o) closeModal(); });

    window.addEventListener('load', init);
  </script>
</body>
</html>
